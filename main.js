const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const multer = require('multer');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');

dotenv.config();
const app = express();
const port = 8888;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./onlineShopDB.sqlite', (err) => {
  if (err) {
    return console.error(err.message);
  }
  console.log('Connected to the SQLite database.');
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
db.run(`
  CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    images TEXT
  )
`);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'public/uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage: storage }).array('images');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è EJS
app.set('view engine', 'ejs');
app.use(express.urlencoded({ extended: true }));
app.use(express.json()); // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.static('public'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  db.all('SELECT * FROM products', [], (err, products) => {
    if (err) throw err;
    res.render('index', { products });
  });
});


app.get('/users', (req, res) => {
  db.all('SELECT * FROM products', [], (err, products) => {
    if (err) throw err;
    res.render('index-for-users', { products });
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.post('/add-product', (req, res, next) => {
  upload(req, res, (err) => {
    if (err instanceof multer.MulterError) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤' });
    if (err) return res.status(500).json({ message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' });

    const { name, price } = req.body;
    const images = req.files.map(file => `/uploads/${file.filename}`).join(',');

    const query = `INSERT INTO products (name, price, images) VALUES (?, ?, ?)`;
    db.run(query, [name, price, images], (err) => {
      if (err) return console.error(err.message);
      res.redirect('/');
    });
  });
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.post('/delete-product/:id', (req, res) => {
  const { id } = req.params;
  db.run('DELETE FROM products WHERE id = ?', id, (err) => {
    if (err) return console.error(err.message);
    res.redirect('/');
  });
});

// Telegram Bot
const TOKEN = process.env.KEY;
const URL = process.env.URL_FOR_USERS;
const URL_ADMINS = process.env.URL_FOR_ADMINS;
const bot = new TelegramBot(TOKEN, { polling: true });
const adminIds = process.env.ADMIN_IDS.split(',').map(id => id.trim());

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  // –ü–µ—Ä–µ–¥–∞–µ–º chatId —á–µ—Ä–µ–∑ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
          web_app: { url: `${URL_ADMINS}?chatId=${chatId}` }
        },
        {
          text: '–û—Ç–∫—Ä—ã—Ç—å –ú–∞–≥–∞–∑–∏–Ω',
          web_app: { url: `${URL}?chatId=${chatId}` }
        }
      ]
    ]
  };

  const keyboardForUsers = {
    inline_keyboard: [
      [
        {
          text: '–û—Ç–∫—Ä—ã—Ç—å –ú–∞–≥–∞–∑–∏–Ω',
          web_app: { url: `${URL}?chatId=${chatId}` }
        }
      ]
    ]
  };

  const userId = msg.from.id;

  if (adminIds.includes(userId.toString())) {
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å admin!', {
      reply_markup: keyboard
    });
  } else {
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! ü§ó', {
      reply_markup: keyboardForUsers
    });
  }

});


app.post('/send-cart', async (req, res) => {
  const cart = req.body.cart;
  const chatId = req.body.chatId;
  const total = req.body.total;

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
          callback_data: 'confirm_order'  // –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        },
        {
          text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
          callback_data: 'cancel_order'  // –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ—Ç–º–µ–Ω—ã
        },
      ]
    ]
  };

  if (!cart || cart.length === 0) {
    return res.status(400).json({ success: false, message: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' });
  }

  const cartMessage = cart.map(item => `${item.name} - ${item.price}`).join('\n');
  const totalMessage = `–û–±—â–∞—è —Å—É–º–º–∞: ${total} ‚Ç∏`;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –æ–±—â–µ–π —Å—É–º–º–æ–π
    await bot.sendMessage(chatId, `–í–∞—à –∑–∞–∫–∞–∑:\n${cartMessage}\n\n${totalMessage}`, {
      reply_markup: keyboard
    });
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.response?.body || error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram' });
  }
});



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const { data, message } = query;
  const chatId = message.chat.id;

  if (data === 'confirm_order') {
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É
    const cartMessage = message.text.split('\n').slice(1, -2).join('\n'); // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const totalMessage = message.text.split('\n').slice(-2).join('\n');   // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É
    try {
      const groupChatId = process.env.GROUP_CHAT_ID; // ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –≤ Telegram
      const userName = query.from.username;

      if(userName != null){
        const messageToGroup = `
        –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href="https://t.me/${userName}">@${userName}</a>\n
        –ó–∞–∫–∞–∑:
        ${cartMessage}\n
        ${totalMessage}
        `;
        await bot.sendMessage(groupChatId, messageToGroup, { parse_mode: 'HTML' });
        await bot.sendMessage(chatId, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!‚ò∫Ô∏è');
      } else {
        await bot.sendMessage(chatId, '–£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: @theYernar.\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞üôå')
      }


    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É:', error);
    }

  } else if (data === 'cancel_order') {
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
    await bot.sendMessage(chatId, '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.');
  }

  bot.answerCallbackQuery(query.id); // –û—Ç–≤–µ—Ç –Ω–∞ callback_query
});

bot.onText(/\/support/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @theYernar (24/7), @thembrk")
})


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}");
});
